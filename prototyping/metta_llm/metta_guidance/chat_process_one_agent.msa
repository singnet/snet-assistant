!(import! &self motto )
!(import! &self prototyping:assistant_utils:data_getters)
!(bind! &Agent (chat-gpt-agent "gpt-3.5-turbo"))
!(bind! &platform_retrieval (retrieval-agent (get-platform-docs-folder) 200 10 (get-data-dir)))
!(bind! &service_retrieval (retrieval-agent (get-service-docs-folder) 200 10 (get-data-dir)))


!(let $question (new-state "[some question about service]")
    (let () (add-atom &self (= (user-question) $question)) (empty))
 )
!(let $service_file (new-state "[the name of the file with information about service]")
    (let () (add-atom &self (= (current-service-file) $service_file)) (empty))
)

(= (service-descriptions)
    (get-service-descriptions)
)
(= (user-query)
   (get-state (user-question))
)

(= (add-platform-question-context)
   (&platform_retrieval (user (user-query)))
)

(= (get-prompt-for-service)
    (let $question (user-query)
        (
            (&service_retrieval (Kwargs (doc_name (get-state (current-service-file)))) )
             (user $question)
        )

    )
)

(= (answer_question)   
    (superpose
       (
            (let $service_name (extract-service-file-name ((history) (user-query)))
                (if ( == $service_name (%void)) (empty) (let () (change-state! (current-service-file) $service_name) (empty)))
            )
            (&Agent  (Messages (history) (Script prototyping/metta_llm/metta_guidance/templates/one_agent.msa)))
       )
    )
)


(= (respond ($role $message))
   (case $role (
        (user (superpose (
            (let () (change-state! (user-question) $message) (empty))
                            (answer_question)
            ))
        )
        ($_ $message)
   ))
)


(= (response) (respond (messages)))
